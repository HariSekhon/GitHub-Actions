#
#  Author: Hari Sekhon
#  Date: 2022-03-11 17:51:59 +0000 (Fri, 11 Mar 2022)
#
#  vim:ts=2:sts=2:sw=2:et
#
#  https://github.com/HariSekhon/GitHub-Actions
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/HariSekhon
#

# ============================================================================ #
#                    Terraform Plan PR and Apply master/main
# ============================================================================ #

---
name: Terraform

on:
  # call from a workflow with triggers like this
  #push:
  #  branches:
  #    - master
  #    - main
  #  paths:
  #    - '**/*.tf'
  #    - '**/*.tfvars'
  #    - '**/.terraform.lock.hcl'
  #    - .github/workflows/terraform.yaml
  #    #- !'**/*.md'
  #pull_request:
  #  branches:
  #    - master
  #    - main
  #  paths:
  #    - '**/*.tf'
  #    - '**/*.tfvars'
  #    - '**/.terraform.lock.hcl'
  #    - .github/workflows/terraform.yaml
  #    #- !'**/*.md'
  workflow_call:
    inputs:
      terraform-version:
        description: Terraform version to use. Will try to infer from .envrc if not given
        type: string
        required: false
      dir:
        description: Terraform base directory to execute in
        type: string
        default: ''
        required: false
      args:
        description: Terraform arguments and options for the Plan and Apply stages
        type: string
        required: false
      plan-only:
        description: run Terraform Plan but not apply
        type: boolean
        required: false
      enforce-fmt-check:
        description: Enforce a format check on PRs - fail and do not show a plan if people don't format their code properly
        type: boolean
        default: true
        required: false
      # XXX: input parameter workaround for:
      #
      #   https://github.com/github-community/community/discussions/18085
      #
      environment:
        description: Deployment environment (optional)
        type: string
        required: false
      environment-url:
        description: Deployment environment URL for UI display (optional)
        type: string
        required: false
      env:
        description: Environment variables in key=value pairs. Can be used to pass secrets that aren't officially supported yet as environment variables
        type: string  # pass in string in export shell format eg. MYVAR=myvalue MYVAR2=myvalue2
        default: ''
        required: false
      mention:
        description: space separated list of @person or @org/team to tag in the PR comment to notify
        type: string
        required: false
      debug:
        description: Debug Mode, true or false
        type: string
        required: false
        default: false
    secrets:
      # only if using Terraform Cloud backend
      TF_API_TOKEN:
        required: false
      # if managing AWS services or using an S3 backend
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_DEFAULT_REGION:
        required: false
      # if managing GCP services or using a GCS backend
      # either supply a GCP service account credential key
      GCP_SERVICEACCOUNT_KEY:
        required: false
      # OR workload identity provider and service_account, see:
      #
      #   https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: false
      GCP_SERVICE_ACCOUNT:
        required: false
      # GITHUB_TOKEN - because actions don't allow you to set GITHUB_TOKEN secret
      #              - this has to be a PAT (personal access token) if you are going to manage various repos and other aspects of GitHub via Terraform
      #              - token must have full repo permission to update the Pull Request with the Terraform Plan output
      GH_TOKEN:
        required: false

permissions:
  contents: read
  pull-requests: write

concurrency:
  # if splitting workflows to one plan and one apply workflow to work around this issue, then must lock on the dir itself:
  #
  #   https://github.com/github-community/community/discussions/18100
  #
  #group: ${{ github.workflow }}-${{ inputs.dir }}
  group: ${{ inputs.dir || 'base' }}
  cancel-in-progress: false  # don't interrupt Terraform runs, you may end up with stale locks

defaults:
  run:
    shell: bash -euxo pipefail {0}
    # cannot use contexts or expressions under defaults.run
    #
    #   https://github.com/github-community/community/discussions/17981
    #
    #working-directory: ${{ inputs.dir }}

env:
  TF_INPUT: "false"
  TF_IN_AUTOMATION: 1
  #TERRAGRUNT_NON_INTERACTIVE: "true"
  #TERRAGRUNT_NO_COLOR: "true"
  # XXX: inputs.debug will need to be switched back to a Boolean at some point but secrets.ACTIONS_RUNNER_DEBUG will stay a string comparison
  TF_LOG: ${{ ( inputs.debug == true || secrets.ACTIONS_RUNNER_DEBUG == 'true' ) && 'TRACE' || '' }}
  # pass one of these via env instead for a more granular subset of debug logs, uses same verbosity levels
  # TF_LOG_CORE
  # TF_LOG_PROVIDER
  ENV: ${{ inputs.env }}
  WORKDIR: ${{ inputs.dir }}
  TERRAFORM_PLAN_TMPFILE: /tmp/terraform-plan.${{ github.sha }}.zip
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  DEBUG: ${{ inputs.debug == true || '' }}

jobs:
  # XXX: step outputs are a workaround for GitHub Actions not supporting testing secrets directly in step conditionals:
  #
  #   https://github.com/github-community/community/discussions/17983
  #
  #   https://github.com/actions/runner/issues/520
  #
  #
  # XXX: collapsing workflow jobs back into a single job to work around requiring multiple deployment environment approvals otherwise:
  #
  #   https://github.com/github-community/community/discussions/14417
  #
  #setup:
  #  name: Setup
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    #outputs:
    #  credentials-configured: ${{ steps.credentials-check.outputs.credentials-configured }}
    #  aws: ${{ steps.aws.outputs.aws }}
    #  gcp_key: ${{ steps.gcp.outputs.gcp_key }}
    #  gcp_keyless: ${{ steps.gcp.outputs.gcp_keyless }}
    #  # secret is passed straight to setup terraform step so don't need to determine an extra step using this
    #  #terraform-cloud: ${{ steps.terraform.outputs.terraform-cloud }}
    #  terraform-version: ${{ steps.terraform.outputs.terraform-version }}
    # XXX: workaround for lack of native environment passing support for reusable workflows
    environment:
      name: ${{ inputs.environment }}
      # doesn't work, env.GITHUB_SERVER_URL and env.GITHUB_REPOSITORY are not populated here even though they appear above in Environment step
      #url: ${{ inputs.environment-url || format('{0}/{1}/actions', env.GITHUB_SERVER_URL, env.GITHUB_REPOSITORY) }}
      url: ${{ inputs.environment-url || format('{0}/{1}/actions', github.server_url, github.repository) }}
    steps:
      - name: Setup environment variables
        run: |
          echo "${{ env.ENV }}" >> "$GITHUB_ENV"

      - name: Environment
        run: env | sort

      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Terraform Version output
        id: terraform
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          if [ -f .envrc ]; then
            source .envrc
          fi
          if [ -n "${{ inputs.terraform-version }}" ]; then
            TERRAFORM_VERSION="${{ inputs.terraform-version }}"
          fi
          if [ -n "${TERRAFORM_VERSION:-}" ]; then
            echo "terraform-version=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Generate AWS output
        id: aws
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] &&
             [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] &&
             [ -n "${{ secrets.AWS_DEFAULT_REGION }}" ]; then

            echo "AWS access key, secret key, and region are set"
            echo "aws=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate GCP output
        id: gcp
        run: |
          if [ -n "${{ secrets.GCP_SERVICEACCOUNT_KEY }}" ]; then

            echo "GCP service account key is set"
            echo "gcp_key=true" >> $GITHUB_OUTPUT
          fi

          if [ -n "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ] &&
             [ -n "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; then

            echo "GCP keyless authentication identity provider and service account are set"
            echo "gcp_keyless=true" >> $GITHUB_OUTPUT
          fi

      - name: GitHub Auth Status
        id: github
        run: |
          if [ -n "${{ secrets.GH_TOKEN }}" ]; then
            echo "GitHub GH_TOKEN is set"
            # who are we logged in as (important both for PR comments and if managing GitHub via Terraform)
            gh auth status  # don't run this unless a token is set
          fi

      #- name: Credentials Check
      #  id: credentials-check
      #  run: |
      #    if [ -n "${{ secrets.TF_API_TOKEN }}" ] ||
      #       [ "${{ steps.aws.outputs.aws }}" = true ] ||
      #       [ "${{ steps.aws.outputs.gcp }}" = true ] ||
      #       [ "${{ steps.aws.outputs.gcp_keyless }}" = true ]; then
      #      echo "credentials-configured=true" >> $GITHUB_OUTPUT
      #    else
      #      echo "credentials-configured=false" >> $GITHUB_OUTPUT
      #    fi

  #credentials_check:
  #  name: Credentials Configured Check
  #  needs: setup
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Check Credentials Configured
  #      run: |
  #        if [ "${{ needs.setup.outputs.credentials-configured }}" = true ]; then
  #        if [ "${{ steps.credentials-check.outputs.credentials-configured }}" = true ]; then
  #          echo "Some credentials have been configured"
  #        else
  #          echo "NO credentials have been configured"
  #          exit 1
  #        fi


  #fmt_check:
  #  name: Fmt Check
  #  needs: setup
  #  if: inputs.enforce-fmt-check == true && github.event_name == 'pull_request'
  #  runs-on: ubuntu-latest
  #  outputs:
  #    outcome: ${{ steps.fmt.outcome }}
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v3
  #
  #    - name: Setup environment variables
  #      run: |
  #        echo "${{ env.ENV }}" >> "$GITHUB_ENV"
  #
  #    - name: Environment
  #      run: env | sort

      # https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          #terraform_version: ${{ needs.setup.outputs.terraform-version }}
          terraform_version: ${{ steps.terraform.outputs.terraform-version }}
          # for Terraform Cloud
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Version
        run: terraform version

      # force people creating pull requests to format it correctly or fail and don't show them a plan
      - name: Terraform Format Check
        id: fmt
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          terraform fmt -diff -check

  #terraform:
  #  name: Terraform
  #  needs:
  #    - setup
  #    - fmt_check
  #    - credentials_check
  #  runs-on: ubuntu-latest
  #  # XXX: workaround for lack of native environment passing support for reusable workflows
  #  environment:
  #    name: ${{ inputs.environment }}
  #    url: ${{ inputs.environment-url || format('{0}/{1}/actions', github.server_url, github.repository) }}
  #  steps:
  #    - name: Setup environment variables
  #      run: |
  #        echo "${{ env.ENV }}" >> "$GITHUB_ENV"
  #
  #    - name: Environment
  #      run: env | sort
  #
  #    - name: Checkout
  #      uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: configure-aws-credentials
        #if: needs.setup.outputs.aws == 'true'
        if: steps.aws.outputs.aws == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # adapted from my Jenkins Shared Library - https://github.com/HariSekhon/Jenkins/blob/master/vars/gcpActivateServiceAccount.groovy
      - name: Google Cloud Activate ServiceAccount Key
        id: google-cloud-activate-serviceaccount
        #if: needs.setup.outputs.gcp_key == 'true'
        if: steps.gcp.outputs.gcp_key == 'true'
        run: |
          base64 --decode <<< "${{ secrets.GCP_SERVICEACCOUNT_KEY }}" > credentials.json
          gcloud auth activate-service-account --key-file=credentials.json
          rm -f credentials.json
          gcloud auth list

      # New GCP keyless authentication:
      #
      #   https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
      #
      - name: Google Cloud Keyless Auth
        id: google-cloud-auth
        #if: needs.setup.outputs.gcp_keyless == 'true'
        if: steps.gcp.ouputs.gcp_keyless == 'true'
        uses: google-github-actions/auth@v0.4.0
        with:
          #workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          #service_account: 'my-service-account@my-project.iam.gserviceaccount.com'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.secrets.GCP_SERVICE_ACCOUNT }}

      ## https://github.com/marketplace/actions/hashicorp-setup-terraform
      #- name: Setup Terraform
      #  uses: hashicorp/setup-terraform@v1
      #  with:
      #    terraform_version: ${{ env.TERRAFORM_VERSION }}
      #    # for Terraform Cloud
      #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      #
      #- name: Terraform Version
      #  run: terraform version

      - name: Terraform Init
        id: init
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || inputs.plan-only == true
        continue-on-error: true
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          # prefer it be explicitly set in the provider.tf
          # allow to pick up important environment variables such as GITHUB_ORGANIZATION from envrc
          #if [ -f .envrc ]; then
          #  source .envrc
          #fi

          # outputs lots of 'my.resource: Refreshing state...' which pollutes the plan posted to the PR
          #
          # do not sanitize inputs.args by passing through env as we actually need full shell evaluation here and the user already has permission
          # to execute within this environment and could do so via a different workflow if they wanted to
          terraform plan -input=false -no-color ${{ inputs.args }} | tee "$TERRAFORM_PLAN_TMPFILE"
          #
          # attempted workaround, but loses errors posting nothing to PR when it fails, even when ignoring plan failure code because tfplan file isn't generated
          #
          # even if the plan fails, still try to show the plan
          #exit_code=0
          #if ! terraform plan -input=false -no-color >/dev/null -out=tfplan; then
          #  exit_code=1
          #fi
          #terraform show tfplan
          #exit "$exit_code"

      - name: Generate environment variable MENTIONS
        if: |
          inputs.mention != '' &&
          (
            github.event_name == 'push' ||
            github.event_name == 'workflow_dispatch'
          )
          &&
          (
            github.ref_name == github.event.repository.default_branch ||
            github.ref_name == 'main' ||
            github.ref_name == 'master'
          )
        env:
          MENTION: ${{ inputs.mention }}
        run: |
          {
            echo -n "MENTIONS="
            for mention in $MENTION; do
              echo -n "@${mention##@} "
            done
            echo
          } >> "$GITHUB_ENV"

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          # XXX: long terraform plan outputs result in this error:
          #
          #   Error: An error occurred trying to start process '/home/runner/runners/2.296.2/externals/node12/bin/node' with working directory '/home/runner/work/myrepo/myrepo'. Argument list too long
          #
          #PLAN: |
          #  terraform
          #  ${{ steps.plan.outputs.stderr }}
          #  ${{ steps.plan.outputs.stdout }}
          WORKFLOW_NAME: ${{ github.workflow }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // XXX: workaround to avoid:
            //
            //    An error occurred trying to start process '/home/runner/runners/2.296.1/externals/node12/bin/node' with working directory '/home/runner/work/myrepo/myrepo'. Argument list too long
            //
            //      https://github.com/actions/github-script/issues/266
            //
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">workflow run</a>'
            const fs = require('fs')
            const plan_file = fs.readFileSync(process.env.TERRAFORM_PLAN_TMPFILE, 'utf8')
            const plan = plan_file.length > 65000 ? "...\n..." + plan_file.toString().substring(plan_file.length - 65000, plan_file.length).split("%0A").join("\n") : plan_file
            const truncated_message = plan_file.length > 65000 ? `Output is too long and was truncated. You can see the full Plan in the ${run_link}<br /><br />` : ""
            const output = `### GitHub Workflow: ${process.env.WORKFLOW_NAME}

            #### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            terraform
            ${plan}
            \`\`\`

            </details>
            ${truncated_message}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*

            ${{ env.MENTIONS }}
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Format Check Failed
        if: steps.fmt.outcome == 'failure' && inputs.enforce-fmt-check == true
        run: exit 1

      - name: Terraform Apply
        # XXX: github.event isn't always populated (eg. in workflow_dispatch), depending on method of trigger, which causes a lot of problems in real world, we cover this up by just applying if master or main
        if: |
          inputs.plan-only == false &&
          (
            (
              github.event_name == 'push' ||
              github.event_name == 'workflow_dispatch'
            )
            &&
            (
              github.ref_name == github.event.repository.default_branch ||
              github.ref_name == 'main' ||
              github.ref_name == 'master'
            )
          )
        run: |
          if [ -n "${WORKDIR:-}" ]; then
            cd "$WORKDIR"
          fi
          #if [ -f .envrc ]; then
          #  source .envrc
          #fi
          # do not sanitize inputs.args by passing through env as we actually need full shell evaluation here and the user already has permission
          # to execute within this environment and could do so via a different workflow if they wanted to
          terraform apply -input=false -auto-approve ${{ inputs.args }}
