#
#  Author: Hari Sekhon
#  Date: 2022-05-20 09:14:27 +0100 (Fri, 20 May 2022)
#
#  vim:ts=2:sts=2:sw=2:et
#
#  https://github.com/HariSekhon/GitHub-Actions
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/HariSekhon
#

# ============================================================================ #
#                 A W S   C o d e A r t i f a c t   S e c r e t
# ============================================================================ #

# Generates an AWS CodeArtifact auth token valid for 12 hours and uploads it into the given GitHub repos secrets or
# if no repos are specified the calling GitHub repo's secrets for use in other workflows to minimize Docker cache misses
#
# This prevents constant cache invalidations in Dockerfile 'ARG CODEARTIFACT_AUTH_TOKEN' within the same 12 hour period
#
# The other option is to generate CODEARTIFACT_AUTH_TOKEN inside a RUN step, but this requires AWS CLI or similar and may be too heavy for light images bases

---
name: CodeArtifact Secret

on:
  workflow_call:
    inputs:
      repos:
        description: The GitHub repos to upload CODEARTIFACT_AUTH_TOKEN secret to. Defaults to the local caller repo
        type: string
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      AWS_CODEARTIFACT_DOMAIN:
        required: true
      # PAT token needed to be able to read public key and write a secret to the repo
      # Token permissions must be:
      #
      #   repo (full)
      #   read:org
      #
      GH_TOKEN:
        required: true

defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  codeartifact_token:
    name: Generate CODEARTIFACT_AUTH_TOKEN Secret
    runs-on: ubuntu-latest
    steps:
      - name: Environment
        run: env | sort

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Generate CODEARTIFACT_AUTH_TOKEN environment variable
        env:
          AWS_CODEARTIFACT_DOMAIN: ${{ secrets.AWS_CODEARTIFACT_DOMAIN }}
        run: |
          # don't shell trace this step because it will expose the token in the logs before we can mask it
          set +x
          CODEARTIFACT_AUTH_TOKEN="$(aws codeartifact get-authorization-token \
                                                      --domain "$AWS_CODEARTIFACT_DOMAIN" \
                                                      --domain-owner "${{ steps.configure-aws-credentials.outputs.aws-account-id }}" \
                                                      --query authorizationToken \
                                                      --output text \
                                                      --duration-seconds 43200)"
                                                      # duration = 12 hours - this is the max allowed by AWS
                                                      # https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> "$GITHUB_ENV"
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"

      - name: Authenticate GitHub CLI
        env:
          TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh auth login --with-token <<< "$TOKEN"
          gh auth status

      - name: Upload CODEARTIFACT_AUTH_TOKEN to GitHub Repo(s) Secret
        env:
          REPOS: ${{ inputs.repos || env.GITHUB_REPOSITORY }}
        run: |
          exitcode=0
          for repo in $(tr '\n' ' ' <<< "$REPOS"); do
            if ! gh secret set -R "$repo" 'CODEARTIFACT_AUTH_TOKEN' --body "$CODEARTIFACT_AUTH_TOKEN"; then
              exitcode=1
            fi
            echo
          done
          exit "$exitcode"
